        <ol class="nested">
            <li>
                A good use of shallow copying would be when
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q1" value="a">
                we have a very large object to copy
                </li>
                <li>
                <input type="radio" name="q1" value="b">
                we just need to scoop out the top few values from an object
                </li>
                <li>
                <input type="radio" name="q1" value="c">
                we don't really care if all the field values are the same
                </li>
            </ol>
            <li>
                A good use of deep copying would be when
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q2" value="a">
                we need to make sure the values in one object change when values in the other do
                </li>
                <li>
                <input type="radio" name="q2" value="b">
                we need to make sure each objects uses separate memory
                </li>
                <li>
                <input type="radio" name="q2" value="c">
                we need to save memory
                </li>
            </ol>
            <li>
                We want a default constructor when
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q3" value="a">
                we can establish meaningful invariants using default values
                </li>
                <li>
                <input type="radio" name="q3" value="b">
                we really don't know what should initialize a class
                </li>
                <li>
                <input type="radio" name="q3" value="c">
                we want to eliminate the faults (defaults) from our classes
                </li>
            </ol>
            <li>
                We need a destructor when our class
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q4" value="a">
                has many members
                </li>
                <li>
                <input type="radio" name="q4" value="b">
                has default values
                </li>
                <li>
                <input type="radio" name="q4" value="c">
                has no copy constructor
                </li>
                <li>
                <input type="radio" name="q4" value="d">
                acquires resources
                </li>
            </ol>
            <li>
                If we write <code>char prof = "Callahan";</code> that will create a string of ___ bytes:
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q5" value="a">
                12
                </li>
                <li>
                <input type="radio" name="q5" value="b">
                depends on the compiler
                </li>
                <li>
                <input type="radio" name="q5" value="c">
                8
                </li>
                <li>
                <input type="radio" name="q5" value="d">
                9
                </li>
            </ol>
            <li>
                Among common pointer problems are:
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q6" value="a">
                access off the end of an array
                </li>
                <li>
                <input type="radio" name="q6" value="b">
                access through the null pointer
                </li>
                <li>
                <input type="radio" name="q6" value="c">
                all answers are correct
                </li>
                <li>
                <input type="radio" name="q6" value="d">
                access to a deallocated object
                </li>
            </ol>
            <li>
                In C++, we can give our own classes array-style access by:
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q7" value="a">
                overloading the [] operator
                </li>
                <li>
                <input type="radio" name="q7" value="b">
                all answers are correct
                </li>
                <li>
                <input type="radio" name="q7" value="c">
                writing <code>get()</code> and <code>set()</code> functions
                </li>
                <li>
                <input type="radio" name="q7" value="d">
                using pointers to pointers
                </li>
            </ol>
            <li>
                If we write <code>char ch[100]</code> then <code>sizeof(ch)</code> will be:
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q8" value="a">
                8
                </li>
                <li>
                <input type="radio" name="q8" value="b">
                4
                </li>
                <li>
                <input type="radio" name="q8" value="c">
                200
                </li>
                <li>
                <input type="radio" name="q8" value="d">
                100
                </li>
            </ol>
            <li>
                If we have a pointer in 32-bit Windows, its size most likely is
            </li>
            <ol type="a" class="nested">
                <li>
                <input type="radio" name="q9" value="a">
                the size of whatever it points to
                </li>
                <li>
                <input type="radio" name="q9" value="b">
                8
                </li>
                <li>
                <input type="radio" name="q9" value="c">
                4
                </li>
            </ol>
        </ol>
        <details>
            <summary class="sum3">
                Answers
            </summary>
            <p>
                1. a; 2. b; 3. a; 4. d; 5. d; 6. c; 7. a; 8. d; 9. c; 
            </p>
        </details>
