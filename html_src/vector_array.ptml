<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            18. Vectors and Arrays
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    18. Vectors and Arrays
                </h1>

                <p class="leadquote">
                    "Caveat emptor!" -- Ancient advice
                </p>

                <details>
                    <summary class="sum1">
                    18.1 Introduction
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Arraymbiraplayed.jpg/600px-Arraymbiraplayed.jpg"
                        width="24%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <p>
                        We are looking at how to go from the hardware supported
                        types "upward" to types that act the way users, not
                        hardware, want.
                    </p>

                    <p>
                        In this chapter we focus on copying, and how it relates
                        to initialization, cleanup, equality testing, etc.
                    </p>

                </details>

                <details>
                    <summary class="sum1">
                    18.2 Initialization
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Depart4x100.jpg/400px-Depart4x100.jpg"
                        width="26%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <p>
                        We usually should initialize our variables rather than
                        accepting the default value. Initializer lists are in
                        curly braces: <code>{}</code>.
                        We can write:
                    </p>

                    <p>
                    <code>
                        <pre>
vector v = {1, 2, 3];
                        </pre>
                    </code>
                    </p>

                    <p>
                     Or:
                    </p>

                    <p>
                    <code>
                        <pre>
vector v = {1, 2, 3];
                        </pre>
                    </code>
                    </p>

                </details>

                <details>
                    <summary class="sum1">
                    18.3 Copying
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/Fuji_Xerox_Document_Centre_505_and_Taiwan_Xerox_Walk-In_120D_at_ROC_National_Central_Library_20101211.jpg/440px-Fuji_Xerox_Document_Centre_505_and_Taiwan_Xerox_Walk-In_120D_at_ROC_National_Central_Library_20101211.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        Consider an implementation of <code>vector</code>
                        like the following:
                    </p>

                    <p>
                    <code>
                        <pre>
class vect {
    int sz;
    double* elem;
public:
    vect(int s)
        :sz{s}, elem{new double [s]}  { /*  */ }
    ~vect()
        { delete[] elem; }
    double get(int i) { return elem[i]; }
    void set(int i, double d) { elem[i] = d; }
};
                        </pre>
                    </code>
                    </p>

                    <p>
                        Then what happens in the following code?
                    </p>

                    <p>
                    <code>
                        <pre>
void f(int n)
{
    vect v(3);
    v.set(2, 2.2);
    vect v2 = v;
    v.set(1, 9.9);
    v2.set(0, 8.8);
    cout &lt;&lt; v[0] &lt;&lt; ' ' &lt;&lt; v2[1];
}
                        </pre>
                    </code>
                    </p>

                    <p>
                        Disaster!
                    </p>

                    <details>
                        <summary class="sum2">
                        18.3.1 Copy constructors
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            What to do? Create a <span class="hilight">copy
                            constructor</span>.
                        </p>

                        <p>
                        <code>
                            <pre>
vector::vector(const vector&amp; arg)
// allocate space, then initialize via copy
    :sz{arg.sz}, elem{new double[arg.sz]}
{
    copy(arg.elem, arg.elem+arg.sz, elem);  // from std lib
}
                            </pre>
                        </code>
                        </p>


                    </details>
                    <details>
                        <summary class="sum2">
                        18.3.2 Copy assignments
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            We get the same problem as above, <i>plus</i>
                            a memory leak, on default assignments.
                            Here's what we need to do:
                        </p>

                        <p>
                        <code>
                            <pre>
vector&amp; vector::operator=(const vector&amp; a)
// make this vector a copy of a
{
    double* p = new double[a.sz];
    copy(a.elem, a.elem+a.sz, p);
    delete[] elem;
    elem = p;
    sz = a.sz;
    return *this;  // return self-ref
}
                            </pre>
                        </code>
                        </p>

                    </details>
                    <details>
                        <summary class="sum2">
                        18.3.3 Copy terminology
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            Let's look at 
                            <span class="hilight">shallow copies</span>
                            versus
                            <span class="hilight">deep copies</span>.
                        </p>

                        <p>
                            In a <span class="hilight">shallow copy</span>
                            both variables point to the same memory.
                        </p>

                        <p>
                            In a <span class="hilight">deep copy</span>
                            each variable points to different memory.
                        </p>

                    </details>
                    <details>
                        <summary class="sum2">
                        18.3.4 Moving
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/The_Movings_by_Louis-Léopold_Boilly.jpg/500px-The_Movings_by_Louis-Léopold_Boilly.jpg"
                            width="24%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            We can write a <i>move</i> assignment operator
                            when we want to explicitly re-use the storage
                            for one object in another.
                            It looks like this:
                        </p>

                        <p>
                        <code>
                            <pre>
vector&amp; vector::operator=(vector&amp;&amp; a)
                            </pre>
                        </code>
                        </p>

                        <p>
                            The compiler will call this automatically when
                            it sees an assigned element is going out of scope.
                        </p>

                    </details>
                </details>

                <details>
                    <summary class="sum1">
                        Drill
                    </summary>

                    <p>
                        <code>vec1.cpp:</code>
                        <br>
                        Write a vector class with the default
                        copy constructor and assignment operator.
                        write a main with a function like
                        <code>f()</code> above. Loop calling it and see
                        what happens.
                    </p>

                    <p>
                        <code>vec2.cpp:</code>
                        <br>
                        Copy that code and add proper copy constructor and 
                        assignment operator. Run your loop again.
                        Things should work now.
                    </p>

                </details>


                <details>
                    <summary class="sum1">
                    18.4 Essential operations
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/B_vitamin_supplement_tablets.jpg/560px-B_vitamin_supplement_tablets.jpg"
                            width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        The C++ FDA recomments the following "7 essential
                        operations" for a class:
                    </p>

                    <ul>
                        <li>
                            Constructor with args
                        </li>

                        <li>
                            Default constructor
                        </li>

                        <li>
                            Copy constructor
                        </li>

                        <li>
                            Copy assignment
                        </li>

                        <li>
                            Move constructor
                        </li>

                        <li>
                            Move assignment
                        </li>

                        <li>
                            Destructor
                        </li>

                    </ul>

                    <details>
                        <summary class="sum2">
                        18.4.1 Explicit constructors
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            The keyword <code>explicit</code> prevents
                            default type conversions for objects when
                            we don't want them. Good example:
                        </p>

                        <p>
                        <code>
                            <pre>
class complex {
    public:
        complex(double); // construct a complex # from a double
};

complex z = 3.14;  // OK!
                            </pre>
                        </code>
                        </p>

                        <p>
                            Bad example:
                        </p>

                        <p>
                        <code>
                            <pre>
vector v = 10;
v = 20;  // this would assign a new vector of 20 doubles to v!
                            </pre>
                        </code>
                        </p>


                    </details>
                    <details>
                        <summary class="sum2">
                        18.4.2 Debugging constructors and destructors
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Insect_collage.png/440px-Insect_collage.png"
                            width="20%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            These are not called just where you see them!
                            Rule:
                        </p>

                        <ul>
                            <li>
                                Whenever an object of type <code>X</code> 
                                is created, one of <code>X</code>'s
                                constructors is invoked.
                            </li>

                            <li>
                                Whenever an object of type <code>X</code> 
                                is destroyed, <code>X</code>'s
                                destructor is invoked.
                            </li>
                        </ul>

                    </details>
                </details>

                <details>
                    <summary class="sum1">
                        Drill
                    </summary>

                    <p>
                        Do the exercise on pages 644-645 of the textbook.
                    </p>

                </details>

                <details>
                    <summary class="sum1">
                    18.5 Access to vector elements
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <details>
                        <summary class="sum2">
                        18.5.1 Overloading on const
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    18.6 Arrays
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        18.6.1 Pointers to array elements
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        18.6.2 Pointers and arrays
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        18.6.3 Array initialization
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        18.6.4 Pointer problems
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>
                <details>
                    <summary class="sum1">
                    18.7 Examples: palindrome
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                    </p>
                    <details>
                        <summary class="sum2">
                        18.7.1 Palindromes using string
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        18.7.2 Palindromes using arrays
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                    <details>
                        <summary class="sum2">
                        18.7.3 Palindromes using pointers
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!--include quiz18.qhtm -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ol>
                    </ol>
                </details>
            </div>
        </div>

    </body>
</html>
