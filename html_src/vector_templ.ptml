<!DOCTYPE html>
<html>
    <head>
<!--include head.txt -->
        <title>
            19. Vector, Templates, and Exceptions
        </title>
<!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
                <h1>
                    19. Vector, Templates, and Exceptions
                </h1>

                <p class="leadquote">
                    "Success is never final." -- Winston Churchill
                </p>

                <details>
                    <summary class="sum1">
                    19.1 The problems
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ProgressiveDieToyota-strip-scrap.jpg/700px-ProgressiveDieToyota-strip-scrap.jpg"
                            width="30%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <p>
                        We want to be able to:
                    </p>

                    <ul>
                        <li>
                            Change the size of vectors on the fly.
                        </li>

                        <li>
                            Make vectors that can store any type we wish.
                        </li>

                        <li>
                            Catch out-of-range errors.
                        </li>
                    </ul>

                    <p>
                        We want these features to so can worry about
                        our users' needs and not about low-level language
                        details.
                    </p>

                    <p>
                        Why don't we want fixed-size vectors? We often <i>don't
                        know</i> how much data is coming!
                    </p>

                    <p>
                        Why don't we use <code>vector</code> for all of
                        our collection needs? Wel, consider searching a
                        million-record <code>vector</code> for a customer
                        record, versus searching a binary search tree.
                        Or think of lookups in a hash table.
                        Different data structures fit different uses!
                        Example: the day's sales records at our shop.
                    </p>

                </details>

                <details>
                    <summary class="sum1">
                    19.2 Changing size
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <details>
                        <summary class="sum2">
                        19.2.1 Representation
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            We <i>could</i> just allocate a new array
                            every single time someone calls
                            <code>push_back()</code>: but that is not very
                            efficient! Better to allocate <i>some</i> extra memory
                            for every chunk we use, like this:
                        </p>

                        <p>
                        <code>
                            <pre>
class vector {
    int sz;
    double* elem;
    int space;  <span class="comment">// number of elems + free space</span>
public:
    <span class="comment">// ...</span>
};
                            </pre>
                        </code>
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                            19.2.2 <code>reserve</code> and
                            <code>capacity</code>
                        </summary>
                        <figure>
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Gold_Bars.jpg/440px-Gold_Bars.jpg"
                                width="28%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            Here's what our key method, <code>reserve</code>,
                            looks like:
                        </p>

                        <p>
                        <code>
                            <pre>
void vector::reserve(int newalloc)
{
    if(newalloc &lt;= space) return;
    double* p = new double[newalloc];
    for(int i = 0; i &lt; sz; ++i) p[i] = elem[i];  <span class="comment">// copy elements</span>
    delete[] elem;  <span class="comment">// deallocate old space</span>
    elem = p;
    space = newalloc;
}
                            </pre>
                        </code>
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                        19.2.3 resize
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            We need to handle the following cases:
                        </p>

                        <ul>
                            <li>
                                The new size is larger than the old allocation.
                            </li>

                            <li>
                                The new size is larger than the old size,
                                but smaller than or equal to the old
                                allocation.
                            </li>

                            <li>
                                The new size is equal to the old size.
                            </li>

                            <li>
                                The new size is smaller than the old size.
                            </li>
                        </ul>

                        <p>
                            <code>resize() </code> is actually very simple,
                            given we've written <code>reserve()</code>:
                        </p>

                        <p>
                        <code>
                            <pre>
void vector::resize(int newsize)
{
    reserve(newsize);
    for(int i = sz; i &lt; newsize; ++i) elem[i] = 0;
    sz = newsize;
}
                            </pre>
                        </code>
                        </p>

                        <p>
                            Can you verify we handle all of these cases
                            correctly?
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                            19.2.4 <code>push_back</code>
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            What do we do when we run out of space?
                            Interestingly, most implementations
                            of <code>vector</code> ask for double
                            the amount of space the vector is already
                            using. (The Lindy effect!) Here is the code for
                            <code>push_back()</code>:
                        </p>

                        <p>
                        <code>
                            <pre>
void vector::push_back(double d)
    <span class="comment">// increase vector size by one and initialize with d</span> 
{
    if(space == 0) reserve(8);
    else if(sz == space) reserve(2*space);
    elem[sz] = d;  <span class="comment">// put d at the end</span> 
    ++sz;  <span class="comment">// increase the size</span> 
}
                            </pre>
                        </code>
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                        19.2.5 Assignment
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            Assignment copies the elements to the new
                            vector, but does not worry about the extra space:
                            maybe the new vector won't need it! The code:
                        </p>

                        <p>
                        <code>
                            <pre>
vector&amp; vector::operator=(const vector&amp; a)
{
    if(this == &amp;a) return *this;  <span class="comment">// self-assignment!</span> 

    if(a.sz &lt;= space) { <span class="comment">// enough space! </span>
<span class="comment">// so just copy </span> 
        for(int i = 0; i &lt; a.sz; ++i) p[i] = a.elem[i];
        sz = a.sz;
        return *this;
    }
}
                            </pre>
                        </code>
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                        19.2.6 Our vector so far
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            See our textbook for source code here.
                        </p>
                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    19.3 Templates
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        We have been coding things like 
                        <code>vector&lt;double &gt;</code> 
                        without really asking what that is doing.
                        We want to freely specify the element type for our
                        vectors. For example:
                    </p>

                    <ul>
                        <li>
                            vector&lt;double&gt;
                        </li>

                        <li>
                            vector&lt;int&gt;
                        </li>

                        <li>
                            vector&lt;Month&gt;
                        </li>

                        <li>
                            vector&lt;char&gt;
                        </li>

                    </ul>

                    <p>
                        "Basically, a <i>template</i> is a mechanism that allows
                        the programmer to use types as parameters for a class
                        or function." (Stroustrup)
                        The compiler will generate code suitable to the
                        specific class we pass.
                        Importantly, not only does the C++ standard library use
                        templates, but we can create our own!
                    </p>

                    <details>
                        <summary class="sum2">
                        19.3.1 Types as template parameters
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            We achieve that goal like this:
                        </p>

                        <p>
                        <code>
                            <pre>
template&lt;class T&gt; class vector {
<span class="comment">// implementation of vectors follows here</span>
}
                            </pre>
                        </code>
                        </p>

                        <p>
                            One way to think of this is that the compiler uses
                            the template and the type we give it to generate 
                            the proper code for that type, so that each element
                            of a <code>vector</code> of <code>char</code> takes
                            up 1 byte, and each element of a
                            <code>vector</code> of <code>int</code> takes up 4
                            bytes.
                        </p>

                        <p>
                            For member functions, the compiler generates code
                            to handle the appropriate type. So if our template
                            has:
                        </p>

                        <p>
                        <code>
                            <pre>
void push_back(const T&amp; d);
                            </pre>
                        </code>
                        </p>

                        <p>
                            Then for our <code>Token vector</code> in
                            <code>Token_stream</code> we get:
                        </p>


                        <p>
                        <code>
                            <pre>
void push_back(const Token&amp; d);
                            </pre>
                        </code>
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                        19.3.2 Generic programming
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            "<span class="hilight">Generic programming:</span>
                            Writing code that works on a variety of types
                            presented as arguments, as long as those argument
                            types meet spcific syntatctic and semantic
                            requirements." (p. 682)
                        </p>

                        <p>
                        <span class="hilight">Polymorphism</span> means the
                        "programmer presents many versions of a concept using a
                        single interface." (p. 682) Generic programming relies
                        on types offered at compile time, while 
                        <span class="hilight">object-oriented
                        programming</span> relies on class hierarchies and
                        virtual functions.
                        Templates resolve the concrete method to call at
                        compile time (making them faster), while
                        object-oriented programming resolves the concrete
                        method to use at run-time, making it more flexible.
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                        19.3.3 Concepts
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>

                        <p>
                            C++ 14 supports <span
                            class="hilight">concepts</span>, which can be used
                            to characterize what types can fill in the 
                            <code>T</code> slot in a template.
                            A few examples:
                        </p>


                        <ul>
                            <li>
                                <code>Element</code> 
                                can be an element in a container.
                            </li>

                            <li>
                                <code>Container</code> 
                                can hold elements.
                            </li>

                            <li>
                                <code>Forward_iterator</code> 
                                supports traversing a sequence, such as
                                a linked list, a vector, or an array.
                            </li>
                        </ul>

                        <p>
                            Thus we can write:
                        </p>

                        <p>
                        <code>
                            <pre>
template&lt;Element T&gt; class vector { /* */ };
                            </pre>
                        </code>
                        </p>

                    </details>

                    <details>
                        <summary class="sum2">
                        19.3.4 Containers and inheritance
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            Templates do not support putting a subclass
                            of a type <code>T</code> in a container
                            expecting the parent type.
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.3.5 Integers as template parameters
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            Interesting but beyond what we can cover.
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.3.6 Template argument deduction
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            Interesting but beyond what we can cover.
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.3.7 Generalizing vector
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                            Interesting but beyond what we can cover.
                        </p>
                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    19.4 Range checking and exceptions
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        A discussion of the trade-offs in range-checking 
                        every <code>vector</code> access or not.
                    </p>
                    <details>
                        <summary class="sum2">
                        19.4.1 An aside: design considerations
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.4.2 A confession: macros
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    19.5 Resources and exceptions
                    </summary>
                    <figure>
                        <img src="" width="40%">
                        <figcaption>
                        </figcaption>
                    </figure>
                    <p>
                        The basic idea here is that when we use
                        <code>new</code> and <code>delete</code> 
                        things can happen between them that prevents the
                        <code>delete</code> from ever being called.
                        It is better to use constructor/destructor pairs
                        to manage resources, and keep your objects within a
                        single scope where possible.
                    </p>

                    <details>
                        <summary class="sum2">
                        19.5.1 Potential resource management problems
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.5.2 Resource acquisition is initialization
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.5.3 Guarantees
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.5.4 unique_ptr
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.5.5 Return by moving
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>

                    <details>
                        <summary class="sum2">
                        19.5.6 RAII for vector
                        </summary>
                        <figure>
                            <img src="" width="40%">
                            <figcaption>
                            </figcaption>
                        </figure>
                        <p>
                        </p>
                    </details>
                </details>

                <details>
                    <summary class="sum1">
                    Test Yourself!
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Exams_in_Jaura%2C_India.jpg/560px-Exams_in_Jaura%2C_India.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>
<!--include quiz19.qhtm -->
                </details>

                <details>
                    <summary class="sum1">
                    Drill
                    </summary>
                    <figure>
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Queens.guard.buck.palace.arp.jpg/600px-Queens.guard.buck.palace.arp.jpg"
                        width="20%">
                        <figcaption>
                        </figcaption>
                    </figure>

                    <ol>
                    </ol>
                </details>
            </div>
        </div>

    </body>
</html>
